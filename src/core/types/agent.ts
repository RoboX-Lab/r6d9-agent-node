/**
 * @file Type definitions for agent-related structures
 * @description Contains shared types used across different agents
 */

import { Annotation } from '@langchain/langgraph';

/**
 * Agent configuration interface
 */
export type TAgentConfig = {
  /** LLM model name to use */
  modelName?: string;
  /** Temperature for generation (0-1) */
  temperature?: number;
  /** Maximum tokens to generate */
  maxTokens?: number;
  /** Maximum retries on failure */
  maxRetries?: number;
};

/**
 * Plan execution state for workflow
 */
export const PlanExecuteState = Annotation.Root({
  /** User's objective/task to accomplish */
  objective: Annotation<string>({
    reducer: (x, y) => y ?? x ?? '',
  }),
  /** Current browser URL */
  currentUrl: Annotation<string>({
    reducer: (x, y) => y ?? x ?? '',
  }),
  /** Current page content */
  pageContent: Annotation<string>({
    reducer: (x, y) => y ?? x ?? '',
  }),
  /** Current step number in the execution plan */
  currentStep: Annotation<number>({
    reducer: (x, y) => y ?? x ?? 0,
  }),
  /** History of visited pages and actions */
  history: Annotation<string[]>({
    reducer: (x, y) => x.concat(y),
  }),
  /** Agent's response to the user */
  response: Annotation<string>({
    reducer: (x, y) => y ?? x ?? '',
  }),
  /** Generated execution plan steps */
  steps: Annotation<string[]>({
    reducer: (x, y) => y ?? x ?? [],
  }),
  /** Success status of the current step */
  success: Annotation<boolean>({
    reducer: (x, y) => y ?? x ?? false,
  }),
});

/**
 * Type for the plan generated by the planner agent
 */
export type Plan = {
  /** Complete step-by-step plan */
  plan: string[];
  /** Next action to execute */
  next_step: string;
};

/**
 * Type for critique evaluation results
 */
export type CritiqueResult = {
  /** Whether the step was successful */
  success: boolean;
  /** Reason for the success/failure */
  reason: string;
  /** Suggestions for improvement if failed */
  suggestions?: string[];
};
